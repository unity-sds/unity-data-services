name: Makefile CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ARTIFACT_BASE_NAME: cumulus_lambda_functions
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: '3.7'
    - run: |
        python3 "${GITHUB_WORKSPACE}/setup.py" install
    - run: |
        python3 "${GITHUB_WORKSPACE}/setup.py" install_lib
    - run: |
        # make file runnable, might not be necessary
        chmod +x "${GITHUB_WORKSPACE}/ci.cd/create_aws_lambda_zip.sh"

        # run script
        "${GITHUB_WORKSPACE}/ci.cd/create_aws_lambda_zip.sh"
    - run: |
        artifact_file_name="${{ env.ARTIFACT_BASE_NAME }}-${{ env.software_version }}.zip"
        terraform_artifact_file_name="terraform_${{ env.ARTIFACT_BASE_NAME }}-${{ env.software_version }}.zip"
        echo "ARTIFACT_FILE=$artifact_file_name" >> $GITHUB_ENV
        echo "TERRAFORM_ARTIFACT_FILE=$terraform_artifact_file_name" >> $GITHUB_ENV
        cp "${GITHUB_WORKSPACE}/cumulus_lambda_functions_deployment.zip" "$artifact_file_name"
        cp "${GITHUB_WORKSPACE}/terraform_cumulus_lambda_functions_deployment.zip" "$terraform_artifact_file_name"
    - name: Create Release
      id: create_release
      if: ${{ contains(github.ref, 'master') }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: "v${{ env.software_version }}"
        release_name: "Release v${{ env.software_version }} - ${{ github.ref }}"
        body: |
          Changes in this release:
          ${{ github.event.head_commit.message }}
        body_path: release.md
        draft: false
        prerelease: false
    - name: Create PreRelease
      id: create_prerelease
      if: ${{ contains(github.ref, 'develop') }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: "v${{ env.software_version }}"
        release_name: "Release v${{ env.software_version }} - ${{ github.ref }}"
        body: |
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: true
    - name: Upload PreRelease Asset 1
      id: upload-prerelease-asset-1
      if: ${{ contains(github.ref, 'develop') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_prerelease.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: "${{ env.ARTIFACT_FILE }}"
        asset_name: "${{ env.ARTIFACT_FILE }}"
        asset_content_type: application/zip
    - name: Upload PreRelease Asset 2
      id: upload-prerelease-asset-2
      if: ${{ contains(github.ref, 'develop') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_prerelease.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: "${{ env.TERRAFORM_ARTIFACT_FILE }}"
        asset_name: "${{ env.TERRAFORM_ARTIFACT_FILE }}"
        asset_content_type: application/zip
    - name: Upload Release Asset 1
      id: upload-release-asset-1
      if: ${{ contains(github.ref, 'master') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: "${{ env.ARTIFACT_FILE }}"
        asset_name: "${{ env.ARTIFACT_FILE }}"
        asset_content_type: application/zip
    - name: Upload Release Asset 2
      id: upload-release-asset-2
      if: ${{ contains(github.ref, 'master') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: "${{ env.TERRAFORM_ARTIFACT_FILE }}"
        asset_name: "${{ env.TERRAFORM_ARTIFACT_FILE }}"
        asset_content_type: application/zip